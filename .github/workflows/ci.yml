name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run validation script
      run: python validate.py
    
    - name: Run linting
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Run type checking
      run: mypy src --ignore-missing-imports
    
    - name: Check code formatting
      run: black --check --diff src tests
    
    - name: Check import sorting
      run: isort --check-only --diff src tests
    
    - name: Run security checks
      run: bandit -r src -f json || true

  test:
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  notebook-validation:
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install nbval
    
    - name: Test notebooks can be executed
      run: |
        # Test that notebooks can be executed without errors
        pytest --nbval-lax notebooks/ -v
    
    - name: Check notebook outputs are cleared
      run: |
        # Check that notebook outputs are cleared (for clean git commits)
        find notebooks/ -name "*.ipynb" -exec python -c "
import json, sys
with open(sys.argv[1], 'r') as f:
    nb = json.load(f)
for cell in nb['cells']:
    if cell['cell_type'] == 'code' and cell.get('outputs', []):
        print(f'ERROR: {sys.argv[1]} has output that should be cleared')
        sys.exit(1)
print(f'OK: {sys.argv[1]}')
" {} \;

  docker-build:
    runs-on: ubuntu-latest
    needs: [validate, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t design-patterns-tutorial:latest .
    
    - name: Test Docker image
      run: |
        # Test that the Docker image can run basic imports
        docker run --rm design-patterns-tutorial:latest python -c "
import sys
sys.path.append('/home/jupyter/work/src')
from patterns import Singleton, ComputerBuilder
print('âœ… Docker image working correctly')
        "
    
    - name: Test Docker Compose
      run: |
        # Test that docker-compose configuration is valid
        docker compose config
        
        # Test that the test runner works
        docker compose --profile test up test-runner --abort-on-container-exit

  quality-gate:
    runs-on: ubuntu-latest
    needs: [validate, test, notebook-validation, docker-build]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Generate complexity metrics
      run: |
        radon cc src --total-average
        radon mi src --min A
    
    - name: Final validation
      run: |
        echo "ðŸŽ‰ All quality gates passed!"
        echo "âœ… Code validation: PASSED"
        echo "âœ… Tests: PASSED" 
        echo "âœ… Notebooks: PASSED"
        echo "âœ… Docker: PASSED"
        echo "âœ… Security: PASSED"
        echo ""
        echo "Tutorial is ready for deployment! ðŸš€"